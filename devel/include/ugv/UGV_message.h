// Generated by gencpp from file ugv/UGV_message.msg
// DO NOT EDIT!


#ifndef UGV_MESSAGE_UGV_MESSAGE_H
#define UGV_MESSAGE_UGV_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ugv
{
template <class ContainerAllocator>
struct UGV_message_
{
  typedef UGV_message_<ContainerAllocator> Type;

  UGV_message_()
    : Forward_Right(0)
    , Reverse_Right(0)
    , Forward_Left(0)
    , Reverse_Left(0)
    , DAC_Right(0.0)
    , DAC_Left(0.0)
    , Brake_Right(0)
    , Brake_Left(0)  {
    }
  UGV_message_(const ContainerAllocator& _alloc)
    : Forward_Right(0)
    , Reverse_Right(0)
    , Forward_Left(0)
    , Reverse_Left(0)
    , DAC_Right(0.0)
    , DAC_Left(0.0)
    , Brake_Right(0)
    , Brake_Left(0)  {
  (void)_alloc;
    }



   typedef int32_t _Forward_Right_type;
  _Forward_Right_type Forward_Right;

   typedef int32_t _Reverse_Right_type;
  _Reverse_Right_type Reverse_Right;

   typedef int32_t _Forward_Left_type;
  _Forward_Left_type Forward_Left;

   typedef int32_t _Reverse_Left_type;
  _Reverse_Left_type Reverse_Left;

   typedef float _DAC_Right_type;
  _DAC_Right_type DAC_Right;

   typedef float _DAC_Left_type;
  _DAC_Left_type DAC_Left;

   typedef int32_t _Brake_Right_type;
  _Brake_Right_type Brake_Right;

   typedef int32_t _Brake_Left_type;
  _Brake_Left_type Brake_Left;





  typedef boost::shared_ptr< ::ugv::UGV_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ugv::UGV_message_<ContainerAllocator> const> ConstPtr;

}; // struct UGV_message_

typedef ::ugv::UGV_message_<std::allocator<void> > UGV_message;

typedef boost::shared_ptr< ::ugv::UGV_message > UGV_messagePtr;
typedef boost::shared_ptr< ::ugv::UGV_message const> UGV_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ugv::UGV_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ugv::UGV_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ugv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ugv': ['/home/shijin/Final_UGV/src/ugv/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ugv::UGV_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ugv::UGV_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ugv::UGV_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ugv::UGV_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ugv::UGV_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ugv::UGV_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ugv::UGV_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "541f49227f5e048de585cd06317c60d9";
  }

  static const char* value(const ::ugv::UGV_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x541f49227f5e048dULL;
  static const uint64_t static_value2 = 0xe585cd06317c60d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ugv::UGV_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ugv/UGV_message";
  }

  static const char* value(const ::ugv::UGV_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ugv::UGV_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Forward_Right\n\
int32 Reverse_Right\n\
int32 Forward_Left\n\
int32 Reverse_Left\n\
\n\
float32 DAC_Right\n\
float32 DAC_Left\n\
\n\
int32 Brake_Right\n\
int32 Brake_Left\n\
";
  }

  static const char* value(const ::ugv::UGV_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ugv::UGV_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Forward_Right);
      stream.next(m.Reverse_Right);
      stream.next(m.Forward_Left);
      stream.next(m.Reverse_Left);
      stream.next(m.DAC_Right);
      stream.next(m.DAC_Left);
      stream.next(m.Brake_Right);
      stream.next(m.Brake_Left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UGV_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ugv::UGV_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ugv::UGV_message_<ContainerAllocator>& v)
  {
    s << indent << "Forward_Right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Forward_Right);
    s << indent << "Reverse_Right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Reverse_Right);
    s << indent << "Forward_Left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Forward_Left);
    s << indent << "Reverse_Left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Reverse_Left);
    s << indent << "DAC_Right: ";
    Printer<float>::stream(s, indent + "  ", v.DAC_Right);
    s << indent << "DAC_Left: ";
    Printer<float>::stream(s, indent + "  ", v.DAC_Left);
    s << indent << "Brake_Right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Brake_Right);
    s << indent << "Brake_Left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Brake_Left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UGV_MESSAGE_UGV_MESSAGE_H
